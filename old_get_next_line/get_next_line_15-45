/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_15-45.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: inoteboo <inoteboo@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/12/17 13:47:19 by inoteboo          #+#    #+#             */
/*   Updated: 2022/12/21 15:45:38 by inoteboo         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>

#ifndef BUFFER_SIZE
# define BUFFER_SIZE 10
#endif


char *buffer_fill(int fd, char *buffer, int *p, int *x)
{
	int i;

	i = 0;
	while (i < BUFFER_SIZE)
		{	
		read(fd, buffer, 1);
		if (*buffer == '\n' || *buffer == '\0')
		{
			*p = 1;
			break ;
		}
		*x += 1;
		i++;
		buffer++;
		}
		return (buffer -i);
}



char *get_next_line(int fd)
{
	char *buffer;
	char *line_store;
	int i;
	int end;
	int *p;
	int *x;

	p = &end;
	x = &i;
	i = 0;
	end = 0;
	buffer = malloc(sizeof(char) * BUFFER_SIZE + 1);
	line_store = malloc(sizeof(char) * 1000);
	while (end == 0)
		{
		buffer = buffer_fill(fd, buffer, p, x);
		strlcat(line_store, buffer, i + 1);
		}
		
	free (buffer);
	printf("\nline_store = :%s\n", line_store);

	return (line_store);
}

int main()
{
	int fd;

	fd = open ("log.txt", O_RDONLY);
	
	get_next_line(fd);
	sleep (2);
	get_next_line(fd);
	sleep (2);
	get_next_line(fd);
	sleep (2);
	get_next_line(fd);
	sleep (2);
	get_next_line(fd);
	sleep (2);
	get_next_line(fd);
	
	close (fd);
	return (0);
}
